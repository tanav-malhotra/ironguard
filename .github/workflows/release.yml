name: release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Prepare artifacts
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/ironguard dist/ironguard-linux-x86_64
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/ironguard-linux-x86_64

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - run: cargo build --release --target x86_64-pc-windows-msvc
      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\x86_64-pc-windows-msvc\release\ironguard.exe dist\ironguard-windows-x86_64.exe
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/ironguard-windows-x86_64.exe

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Extract release notes from CHANGELOG.md (tags only)
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          echo "Extracting notes for $VERSION"
          awk -v ver="## ${VERSION}" 'BEGIN{found=0} {
            if ($0 ~ "^"ver) {found=1; next}
            if (found && $0 ~ /^## /) { exit }
            if (found) print
          }' CHANGELOG.md > notes.txt
          test -s notes.txt || (echo "CHANGELOG missing section ${VERSION}" && exit 1)
      - name: Create Release for tag
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/linux/ironguard-linux-x86_64
            dist/windows/ironguard-windows-x86_64.exe
            scripts/install.ps1
            scripts/install.sh
          body_path: notes.txt
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create prerelease on push to main
        if: github.ref == 'refs/heads/main'
        id: prerelease
        run: echo "noop"
      - name: Compute beta tag from repo state
        if: github.ref == 'refs/heads/main'
        id: beta
        run: |
          set -euo pipefail
          # Version from Cargo.toml (may represent next target release already)
          VER=$(grep -m1 '^version\s*=' Cargo.toml | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
          # Latest non-prerelease tag in repo (vX.Y.Z)
          LATEST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' | sed 's/^v//' | sort -V | tail -n1 || true)

          # Decide base version for prerelease:
          # If Cargo.toml >= latest tag: use Cargo.toml as base
          # Else: bump patch of latest tag
          bump_patch() {
            IFS=. read -r MA MI PA <<< "$1"
            echo "${MA}.${MI}.$((PA+1))"
          }

          if [ -n "${LATEST_TAG}" ]; then
            MAX=$(printf "%s\n%s\n" "$VER" "$LATEST_TAG" | sed '/^$/d' | sort -V | tail -n1)
            if [ "$MAX" = "$VER" ]; then
              BASE="$VER"
            else
              BASE="$(bump_patch "$LATEST_TAG")"
            fi
          else
            # No tags yet; if VER exists, bump it to indicate upcoming release, else default
            if [ -n "${VER:-}" ]; then
              BASE="$(bump_patch "$VER")"
            else
              BASE="0.1.0"
            fi
          fi

          BASE_TAG="v${BASE}"
          COUNT=$(git tag --list "${BASE_TAG}-beta.*" | wc -l | tr -d ' ')
          N=$((COUNT + 1))
          TAG="${BASE_TAG}-beta.${N}"
          NAME="beta ${BASE_TAG}"

          echo "base=${BASE_TAG}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "name=${NAME}" >> "$GITHUB_OUTPUT"
      - name: Extract prerelease notes from CHANGELOG.md (latest section)
        if: github.ref == 'refs/heads/main'
        run: |
          BASE="${{ steps.beta.outputs.base }}"
          # Prefer the -beta section matching the base (e.g., ## vX.Y.Z-beta)
          awk -v ver="## ${BASE}-beta" 'BEGIN{f=0} $0 ~ "^"ver{f=1;next} f && /^## /{exit} f{print}' CHANGELOG.md > notes.txt || true
          # Fallback to the exact base section (## vX.Y.Z)
          if [ ! -s notes.txt ]; then
            awk -v ver="## ${BASE}" 'BEGIN{f=0} $0 ~ "^"ver{f=1;next} f && /^## /{exit} f{print}' CHANGELOG.md >> notes.txt || true
          fi
          if [ ! -s notes.txt ]; then echo "Automated prerelease for ${GITHUB_SHA}" > notes.txt; fi
      - name: Create prerelease on push to main (beta)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.beta.outputs.tag }}
          name: ${{ steps.beta.outputs.name }}
          files: |
            dist/linux/ironguard-linux-x86_64
            dist/windows/ironguard-windows-x86_64.exe
            scripts/install.ps1
            scripts/install.sh
          body_path: notes.txt
          draft: false
          prerelease: true
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


