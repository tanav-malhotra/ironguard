name: release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-main
  cancel-in-progress: false

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - run: cargo build --release --target x86_64-unknown-linux-gnu
      - name: Prepare artifacts
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/ironguard dist/ironguard-linux-x86_64
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: dist/ironguard-linux-x86_64

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - run: cargo build --release --target x86_64-pc-windows-msvc
      - name: Prepare artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          Copy-Item target\x86_64-pc-windows-msvc\release\ironguard.exe dist\ironguard-windows-x86_64.exe
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/ironguard-windows-x86_64.exe

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --prune
      - name: Read version from Cargo.toml
        id: ver
        run: |
          set -euo pipefail
          VERSION=$(grep -m1 -Po '^version\s*=\s*"\K[^"]+' Cargo.toml)
          echo "Detected version: ${VERSION}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=v${VERSION}" >> "$GITHUB_OUTPUT"
      - name: Guard: fail if tag already exists
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.ver.outputs.tag }}"; then
            echo "Tag ${{ steps.ver.outputs.tag }} already exists. Please bump version in Cargo.toml." >&2
            exit 1
          fi
      - name: Determine previous tag
        id: prev
        run: |
          set -euo pipefail
          PREV_TAG=$(git tag -l 'v*' --sort=version:refname | tail -n 1 || true)
          echo "Previous tag: ${PREV_TAG}"
          echo "prev=${PREV_TAG}" >> "$GITHUB_OUTPUT"
      - name: Generate release notes and changelog link
        id: notes
        env:
          REPO: ${{ github.repository }}
          TAG: ${{ steps.ver.outputs.tag }}
          PREV_TAG: ${{ steps.prev.outputs.prev }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          NOTES_BODY=notes.txt
          : > "$NOTES_BODY"
          if [ -n "${PREV_TAG}" ]; then
            COMPARE_URL="https://github.com/${REPO}/compare/${PREV_TAG}...${TAG}"
          else
            FIRST=$(git rev-list --max-parents=0 HEAD | tail -n1)
            COMPARE_URL="https://github.com/${REPO}/compare/${FIRST}...${TAG}"
          fi
          echo "Full changelog: ${COMPARE_URL}" >> "$NOTES_BODY"
          if [ -n "${PREV_TAG}" ]; then
            gh api -X POST "repos/${REPO}/releases/generate-notes" \
              -f tag_name="${TAG}" \
              -f target_commitish="${GITHUB_SHA}" \
              -f previous_tag_name="${PREV_TAG}" \
              --jq '.body' >> "$NOTES_BODY"
          else
            gh api -X POST "repos/${REPO}/releases/generate-notes" \
              -f tag_name="${TAG}" \
              -f target_commitish="${GITHUB_SHA}" \
              --jq '.body' >> "$NOTES_BODY"
          fi
      - name: Create and push tag
        env:
          TAG: ${{ steps.ver.outputs.tag }}
        run: |
          set -euo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "${TAG}" -m "Release ${TAG}"
          git push origin "${TAG}"
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Include install scripts
        run: |
          mkdir -p dist
          cp scripts/install.sh dist/
          cp scripts/install.ps1 dist/
      - name: Create GitHub Release
        env:
          TAG: ${{ steps.ver.outputs.tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh release create "${TAG}" \
            "dist/linux/ironguard-linux-x86_64" \
            "dist/windows/ironguard-windows-x86_64.exe" \
            "dist/install.ps1" \
            "dist/install.sh" \
            --title "${TAG}" \
            --notes-file notes.txt


